@tool
extends RefCounted

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGetUnbanRequestsResponse

## A list that contains information about the channel's unban requests.
var data: Array[Data];
## Contains information used to page through a list of results. The object is empty if there are no more pages left to page through.
var pagination: Pagination;

static func from_json(d: Dictionary) -> TwitchGetUnbanRequestsResponse:
	var result = TwitchGetUnbanRequestsResponse.new();
	if d.has("data") && d["data"] != null:
		for value in d["data"]:
			result.data.append(Data.from_json(value));
	if d.has("pagination") && d["pagination"] != null:
		result.pagination = Pagination.from_json(d["pagination"]);
	return result;

func to_dict() -> Dictionary:
	var d: Dictionary = {};
	d["data"] = [];
	if data != null:
		for value in data:
			d["data"].append(value.to_dict());
	if pagination != null:
		d["pagination"] = pagination.to_dict();
	return d;

func to_json() -> String:
	return JSON.stringify(to_dict());

## 
class Data extends RefCounted:
	## Unban request ID.
	var id: String;
	## User ID of broadcaster whose channel is receiving the unban request.
	var broadcaster_id: String;
	## The broadcaster's display name.
	var broadcaster_name: String;
	## The broadcaster's login name.
	var broadcaster_login: String;
	## User ID of moderator who approved/denied the request.
	var moderator_id: String;
	## The moderator's login name.
	var moderator_login: String;
	## The moderator's display name.
	var moderator_name: String;
	## User ID of the requestor who is asking for an unban.
	var user_id: String;
	## The user's login name.
	var user_login: String;
	## The user's display name.
	var user_name: String;
	## Text of the request from the requesting user.
	var text: String;
	## Status of the request. One of:      * pending * approved * denied * acknowledged * canceled
	var status: String;
	## Timestamp of when the unban request was created.
	var created_at: Variant;
	## Timestamp of when moderator/broadcaster approved or denied the request.
	var resolved_at: Variant;
	## Text input by the resolver (moderator) of the unban. request
	var resolution_text: String;


	static func from_json(d: Dictionary) -> Data:
		var result = Data.new();
		if d.has("id") && d["id"] != null:
			result.id = d["id"];
		if d.has("broadcaster_id") && d["broadcaster_id"] != null:
			result.broadcaster_id = d["broadcaster_id"];
		if d.has("broadcaster_name") && d["broadcaster_name"] != null:
			result.broadcaster_name = d["broadcaster_name"];
		if d.has("broadcaster_login") && d["broadcaster_login"] != null:
			result.broadcaster_login = d["broadcaster_login"];
		if d.has("moderator_id") && d["moderator_id"] != null:
			result.moderator_id = d["moderator_id"];
		if d.has("moderator_login") && d["moderator_login"] != null:
			result.moderator_login = d["moderator_login"];
		if d.has("moderator_name") && d["moderator_name"] != null:
			result.moderator_name = d["moderator_name"];
		if d.has("user_id") && d["user_id"] != null:
			result.user_id = d["user_id"];
		if d.has("user_login") && d["user_login"] != null:
			result.user_login = d["user_login"];
		if d.has("user_name") && d["user_name"] != null:
			result.user_name = d["user_name"];
		if d.has("text") && d["text"] != null:
			result.text = d["text"];
		if d.has("status") && d["status"] != null:
			result.status = d["status"];
		if d.has("created_at") && d["created_at"] != null:
			result.created_at = d["created_at"];
		if d.has("resolved_at") && d["resolved_at"] != null:
			result.resolved_at = d["resolved_at"];
		if d.has("resolution_text") && d["resolution_text"] != null:
			result.resolution_text = d["resolution_text"];
		return result;

	func to_dict() -> Dictionary:
		var d: Dictionary = {};
		d["id"] = id;
		d["broadcaster_id"] = broadcaster_id;
		d["broadcaster_name"] = broadcaster_name;
		d["broadcaster_login"] = broadcaster_login;
		d["moderator_id"] = moderator_id;
		d["moderator_login"] = moderator_login;
		d["moderator_name"] = moderator_name;
		d["user_id"] = user_id;
		d["user_login"] = user_login;
		d["user_name"] = user_name;
		d["text"] = text;
		d["status"] = status;
		d["created_at"] = created_at;
		d["resolved_at"] = resolved_at;
		d["resolution_text"] = resolution_text;
		return d;


	func to_json() -> String:
		return JSON.stringify(to_dict());

## Contains information used to page through a list of results. The object is empty if there are no more pages left to page through.
class Pagination extends RefCounted:
	## The cursor used to get the next page of results. Use the cursor to set the requestâ€™s after query parameter.
	var cursor: String;


	static func from_json(d: Dictionary) -> Pagination:
		var result = Pagination.new();
		if d.has("cursor") && d["cursor"] != null:
			result.cursor = d["cursor"];
		return result;

	func to_dict() -> Dictionary:
		var d: Dictionary = {};
		d["cursor"] = cursor;
		return d;


	func to_json() -> String:
		return JSON.stringify(to_dict());

